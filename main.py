from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import random
import json

from config import BOT_TOKEN
from db import init_db, create_user, get_balance, update_balance, update_game_stats, get_user_stats, add_referral_bonus
from aiogram.types import CallbackQuery

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

init_db()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ - —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
CHANNEL_ID = "-1002803457841"
SUBSCRIPTION_CHANNEL = "@MoonCasino777"

# –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç–∞–≤–æ–∫
game_queue = []
is_game_running = False

class GameState(StatesGroup):
    main_menu = State()
    play_menu = State()
    profile = State()
    bot_games = State()
    channel_games = State()

    # –ò–≥—Ä—ã –≤ –±–æ—Ç–µ
    mines_setup = State()
    tower_setup = State()
    mines_game = State()
    tower_game = State()

    # –ò–≥—Ä—ã –≤ –∫–∞–Ω–∞–ª–µ
    channel_bowling = State()
    channel_basketball = State()
    channel_dice_duel = State()
    channel_dice_higher = State()
    channel_dice_even = State()
    channel_triada = State()
    channel_darts = State()

    # –°—Ç–∞–≤–∫–∏
    waiting_bet = State()

    # –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
    admin_add_coins_id = State()
    admin_add_coins_amount = State()

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –º–∏–Ω
MINES_COEFFICIENTS = {
    2: [1.02, 1.11, 1.22, 1.34, 1.48, 1.65, 1.84, 2.07, 2.35, 2.69, 3.1, 3.62, 4.27, 5.13, 6.27, 7.83, 10.07, 13.43, 18.8],
    3: [1.07, 1.22, 1.4, 1.63, 1.9, 2.23, 2.65, 3.18, 3.86, 4.75, 5.94, 7.56, 9.83, 13.1, 18.02, 25.74, 38.61, 61.77, 108.0],
    4: [1.12, 1.34, 1.63, 1.99, 2.45, 3.07, 3.89, 5.0, 6.53, 8.71, 11.88, 16.63, 24.02, 36.03, 56.62, 94.37, 169.87, 339.74, 792.73, 2378.2, 11891]
}

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –±–∞—à–Ω–∏
TOWER_COEFFICIENTS = {
    1: [1.17, 1.47, 1.84, 2.29, 2.87, 3.59],
    2: [1.57, 2.61, 4.35, 7.25, 12.09, 20.15],
    3: [2.35, 5.87, 14.69, 36.72, 91.80, 229.49],
    4: [4.70, 23.50, 117.50, 587.50, 2937.50, 14687.50]
}

async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(chat_id=SUBSCRIPTION_CHANNEL, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def require_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω"""
    return await check_subscription(user_id)

def get_subscription_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/MoonCasino777")],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ]
    )
    return keyboard

def get_start_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_play_menu_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="ü§ñ –ò–≥—Ä–∞—Ç—å –≤ –±–æ—Ç–µ")],
            [KeyboardButton(text="üí¨ –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_bot_games_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí£ –ú–∏–Ω—ã"), KeyboardButton(text="üèó –ë–∞—à–Ω—è")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_bet_input_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_basketball_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ (x1.8)")],
            [KeyboardButton(text="‚ùå –ú–∏–º–æ (x1.3)")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_dice_duel_choice_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèÜ –ü–æ–±–µ–¥–∞ (x1.8)"), KeyboardButton(text="üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ (x1.8)")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_dice_higher_lower_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚¨ÜÔ∏è –ë–æ–ª—å—à–µ"), KeyboardButton(text="‚¨áÔ∏è –ú–µ–Ω—å—à–µ")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_dice_even_odd_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="2Ô∏è‚É£ –ß–µ—Ç–Ω–æ–µ"), KeyboardButton(text="1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–æ–µ")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_triada_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="1Ô∏è‚É£"), KeyboardButton(text="2Ô∏è‚É£"), KeyboardButton(text="3Ô∏è‚É£")],
            [KeyboardButton(text="4Ô∏è‚É£"), KeyboardButton(text="5Ô∏è‚É£"), KeyboardButton(text="6Ô∏è‚É£")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_bowling_choice_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèÜ –ü–æ–±–µ–¥–∞ (x1.8)"), KeyboardButton(text="üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ (x1.8)")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_darts_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üî¥ –ö—Ä–∞—Å–Ω–æ–µ (x1.8)"), KeyboardButton(text="‚ö™ –ë–µ–ª–æ–µ (x1.8)")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_mines_count_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="2 –º–∏–Ω—ã"), KeyboardButton(text="3 –º–∏–Ω—ã")],
            [KeyboardButton(text="4 –º–∏–Ω—ã")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_tower_mines_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="1 –º–∏–Ω–∞"), KeyboardButton(text="2 –º–∏–Ω—ã")],
            [KeyboardButton(text="3 –º–∏–Ω—ã"), KeyboardButton(text="4 –º–∏–Ω—ã")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def create_mines_field(mines_count=2, opened_cells=None):
    if opened_cells is None:
        opened_cells = []

    field = []
    for i in range(5):
        row = []
        for j in range(5):
            if (i, j) in opened_cells:
                row.append("üíé")
            else:
                row.append("‚¨ú")
        field.append(row)
    return field

def create_mines_inline_keyboard(mines_count, opened_cells, current_coeff):
    keyboard = []
    field = create_mines_field(mines_count, opened_cells)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–µ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö (—Å 4 —Ä—è–¥–∞ –¥–æ 0)
    for i in range(4, -1, -1):
        row = []
        for j in range(5):
            if (i, j) in opened_cells:
                row.append(InlineKeyboardButton(text="üíé", callback_data=f"mines_{i}_{j}"))
            else:
                row.append(InlineKeyboardButton(text="‚¨ú", callback_data=f"mines_{i}_{j}"))
        keyboard.append(row)

    keyboard.append([
        InlineKeyboardButton(text=f"üí∞ –ó–∞–±—Ä–∞—Ç—å {current_coeff}x", callback_data="mines_cash_out"),
        InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏", callback_data="mines_exit")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_tower_inline_keyboard(tower_mines, opened_levels, current_level):
    keyboard = []

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–∞—à–Ω—é —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö (—Å 5 —É—Ä–æ–≤–Ω—è –¥–æ 0) - 6 —É—Ä–æ–≤–Ω–µ–π –≤—Å–µ–≥–æ
    for level in range(5, -1, -1):
        row = []
        for cell in range(5):
            if level < current_level:
                if (level, cell) in opened_levels:
                    row.append(InlineKeyboardButton(text="üíé", callback_data=f"tower_{level}_{cell}"))
                else:
                    row.append(InlineKeyboardButton(text="‚¨ú", callback_data=f"tower_{level}_{cell}"))
            elif level == current_level:
                row.append(InlineKeyboardButton(text="‚¨ú", callback_data=f"tower_{level}_{cell}"))
            else:
                row.append(InlineKeyboardButton(text="‚¨õ", callback_data=f"tower_{level}_{cell}"))
        keyboard.append(row)

    if current_level > 0:
        coeffs = TOWER_COEFFICIENTS[tower_mines]
        current_coeff = coeffs[current_level - 1] if current_level - 1 < len(coeffs) else coeffs[-1]
        keyboard.append([
            InlineKeyboardButton(text=f"üí∞ –ó–∞–±—Ä–∞—Ç—å {current_coeff}x", callback_data="tower_cash_out"),
            InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏", callback_data="tower_exit")
        ])
    else:
        keyboard.append([
            InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏", callback_data="tower_exit")
        ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_profile_keyboard(user_id):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_profile_inline_keyboard(user_id):
    if user_id == 6774136020:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí∞ +1000 –º–æ–Ω–µ—Ç", callback_data="add_1000_coins")],
                [InlineKeyboardButton(text="üí≥ –ù–∞—á–∏—Å–ª–∏—Ç—å –≤–∞–ª—é—Ç—É –ø–æ ID", callback_data="add_coins_by_id")]
            ]
        )
        return keyboard
    return None

@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: CallbackQuery, state: FSMContext):
    is_subscribed = await check_subscription(callback.from_user.id)

    if is_subscribed:
        create_user(callback.from_user.id)
        balance = get_balance(callback.from_user.id)
        await state.set_state(GameState.main_menu)
        await callback.message.edit_text(
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            f"üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MoonCasino!</b>\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance}</b> –º–æ–Ω–µ—Ç",
            reply_markup=None
        )
        await callback.message.answer(
            "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_start_keyboard()
        )
        await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'", show_alert=True)

@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    is_subscribed = await check_subscription(message.from_user.id)

    if not is_subscribed:
        await message.answer(
            f"üîí <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}\n"
            f"üé∞ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
            reply_markup=get_subscription_keyboard()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    referrer_id = None
    if len(message.text.split()) > 1:
        start_param = message.text.split()[1]
        if start_param.startswith("ref"):
            try:
                referrer_id = int(start_param[3:])
                if referrer_id == message.from_user.id:
                    referrer_id = None  # –ù–µ–ª—å–∑—è –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è
            except ValueError:
                pass

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –µ—Å–ª–∏ –µ—Å—Ç—å
    from db import create_user_with_referrer
    if referrer_id:
        create_user_with_referrer(message.from_user.id, referrer_id)
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        try:
            await bot.send_message(
                referrer_id,
                f"üéâ <b>–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n"
                f"üí∞ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 5% —Å –µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–µ–π!"
            )
        except:
            pass
    else:
        create_user(message.from_user.id)

    balance = get_balance(message.from_user.id)
    await state.set_state(GameState.main_menu)
    
    welcome_text = f"üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MoonCasino!</b>\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance}</b> –º–æ–Ω–µ—Ç"
    if referrer_id:
        welcome_text += f"\n\nüéÅ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"
    
    await message.answer(welcome_text, reply_markup=get_start_keyboard())

def get_channel_games_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé≥ –ë–æ—É–ª–∏–Ω–≥"), KeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª")],
            [KeyboardButton(text="üé≤ –ö—É–±—ã (–¥—É—ç–ª—å)"), KeyboardButton(text="üé≤ –ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ")],
            [KeyboardButton(text="üé≤ –ß–µ—Ç/–Ω–µ—á–µ—Ç"), KeyboardButton(text="üé≤ –¢—Ä–∏–∞–¥–∞")],
            [KeyboardButton(text="üéØ –î–∞—Ä—Ç—Å")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

@router.message(F.text == "üéÆ –ò–≥—Ä–∞—Ç—å")
async def play_menu_handler(message: Message, state: FSMContext):
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        await message.answer(
            f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
            reply_markup=get_subscription_keyboard()
        )
        return

    await state.set_state(GameState.play_menu)
    await message.answer(
        "üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:</b>",
        reply_markup=get_play_menu_keyboard()
    )

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message, state: FSMContext):
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        await message.answer(
            f"üîí <b>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
            reply_markup=get_subscription_keyboard()
        )
        return

    await state.set_state(GameState.profile)
    balance = get_balance(message.from_user.id)
    username = message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    first_name = message.from_user.first_name or "–ò–≥—Ä–æ–∫"

    inline_keyboard = get_profile_inline_keyboard(message.from_user.id)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ –Ω–∞–∑–∞–¥
    profile_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = get_user_stats(message.from_user.id)
    if stats:
        favorite_game = f"{stats['favorite_game']} [{stats['favorite_game_count']}]"
        total_games = stats['total_games']
        biggest_win = stats['biggest_win']
        registration_date = stats['registration_date'][:10] if stats['registration_date'] else "20.10.2024"
    else:
        favorite_game = "–¢—Ä–∏–∞–¥–∞ [74]"
        total_games = 206
        biggest_win = 9
        registration_date = "20.10.2024"

    await message.answer(
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: {message.from_user.id}\n"
        f"üë§ –ò–º—è: {first_name}\n"
        f"üì± –ù–∏–∫: @{username}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance}</b> –º–æ–Ω–µ—Ç\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"‚î£ –õ—é–±–∏–º–∞—è –∏–≥—Ä–∞: {favorite_game}\n"
        f"‚î£ –°—ã–≥—Ä–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã: {total_games}\n"
        f"‚îó –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à: {biggest_win}$\n\n"
        f"üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}",
        reply_markup=profile_keyboard
    )

    if inline_keyboard:
        await message.answer("üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:</b>", reply_markup=inline_keyboard)

@router.message(F.text == "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
async def referral_handler(message: Message, state: FSMContext):
    from db import get_referral_info
    
    referrals_count = get_referral_info(message.from_user.id)
    bot_username = (await bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start=ref{message.from_user.id}"
    
    await message.answer(
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        f"üí∞ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 5% —Å –∫–∞–∂–¥–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!\n\n"
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚îî –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referrals_count}\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"<code>{referral_link}</code>\n\n"
        f"üì¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!"
    )

@router.message(F.text == "ü§ñ –ò–≥—Ä–∞—Ç—å –≤ –±–æ—Ç–µ")
async def bot_games_handler(message: Message, state: FSMContext):
    await state.set_state(GameState.bot_games)
    await message.answer(
        "ü§ñ <b>–ò–≥—Ä—ã –≤ –±–æ—Ç–µ:</b>\n\n"
        "üí£ <b>–ú–∏–Ω—ã</b> - –Ω–∞–π–¥–∏—Ç–µ –∞–ª–º–∞–∑—ã, –∏–∑–±–µ–≥–∞—è –º–∏–Ω\n"
        "üèó <b>–ë–∞—à–Ω—è</b> - –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤—ã—à–µ –ø–æ —É—Ä–æ–≤–Ω—è–º",
        reply_markup=get_bot_games_keyboard()
    )

@router.message(F.text == "üí¨ –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ")
async def channel_games_handler(message: Message, state: FSMContext):
    await state.set_state(GameState.channel_games)
    await message.answer(
        "üí¨ <b>–ò–≥—Ä—ã –≤ –∫–∞–Ω–∞–ª–µ:</b>\n\n"
        "üé≥ <b>–ë–æ—É–ª–∏–Ω–≥</b> - –¥—É—ç–ª—å x1.8\n"
        "üèÄ <b>–ë–∞—Å–∫–µ—Ç–±–æ–ª</b> - –ø–æ–ø–∞–¥–∞–Ω–∏–µ x1.8, –º–∏–º–æ x1.3\n"
        "üé≤ <b>–ö—É–±—ã (–¥—É—ç–ª—å)</b> - x1.8\n"
        "üé≤ <b>–ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ</b> - x1.8\n"
        "üé≤ <b>–ß–µ—Ç/–Ω–µ—á–µ—Ç</b> - x1.8\n"
        "üé≤ <b>–¢—Ä–∏–∞–¥–∞</b> - 1 —Å–æ–≤–ø. x1.8, 2 —Å–æ–≤–ø. x2.4, 3 —Å–æ–≤–ø. x3.1\n"
        "üéØ <b>–î–∞—Ä—Ç—Å</b> - x1.8",
        reply_markup=get_channel_games_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä –≤ –±–æ—Ç–µ
@router.message(F.text == "üí£ –ú–∏–Ω—ã")
async def mines_setup_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.bot_games:
        await state.set_state(GameState.mines_setup)
        await message.answer(
            "üí£ <b>–ú–∏–Ω—ã</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω:",
            reply_markup=get_mines_count_keyboard()
        )

@router.message(F.text == "üèó –ë–∞—à–Ω—è")
async def tower_setup_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.bot_games:
        await state.set_state(GameState.tower_setup)
        await message.answer(
            "üèó <b>–ë–∞—à–Ω—è</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ:",
            reply_markup=get_tower_mines_keyboard()
        )

@router.message(F.text.in_(["2 –º–∏–Ω—ã", "3 –º–∏–Ω—ã", "4 –º–∏–Ω—ã"]))
async def mines_count_selection(message: Message, state: FSMContext):
    if not await require_subscription(message.from_user.id):
        await message.answer(
            f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
            reply_markup=get_subscription_keyboard()
        )
        return

    mines_count = int(message.text.split()[0])
    await state.update_data(mines_count=mines_count)
    await state.set_state(GameState.waiting_bet)
    await message.answer(
        f"üí£ <b>–ú–∏–Ω—ã ({mines_count} –º–∏–Ω—ã)</b>\n"
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç 200 –¥–æ 20000 –º–æ–Ω–µ—Ç):",
        reply_markup=get_bet_input_keyboard()
    )

@router.message(F.text.in_(["1 –º–∏–Ω–∞", "2 –º–∏–Ω—ã", "3 –º–∏–Ω—ã", "4 –º–∏–Ω—ã"]))
async def tower_mines_selection(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.tower_setup:
        if not await require_subscription(message.from_user.id):
            await message.answer(
                f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
                f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
                reply_markup=get_subscription_keyboard()
            )
            return

        tower_mines = int(message.text.split()[0])
        await state.update_data(tower_mines=tower_mines)
        await state.set_state(GameState.waiting_bet)
        await message.answer(
            f"üèó <b>–ë–∞—à–Ω—è ({tower_mines} {'–º–∏–Ω–∞' if tower_mines == 1 else '–º–∏–Ω—ã'})</b>\n"
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç 200 –¥–æ 20000 –º–æ–Ω–µ—Ç):",
            reply_markup=get_bet_input_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä –≤ –∫–∞–Ω–∞–ª–µ
@router.message(F.text.in_(["üé≥ –ë–æ—É–ª–∏–Ω–≥", "üé≥ –ë–æ—É–ª–∏–Ω–≥ (–¥—É—ç–ª—å)", "–ë–æ—É–ª–∏–Ω–≥"]))
async def channel_bowling_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_games:
        if not await require_subscription(message.from_user.id):
            await message.answer(
                f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
                f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
                reply_markup=get_subscription_keyboard()
            )
            return

        await state.set_state(GameState.channel_bowling)
        await state.update_data(game_type="bowling")
        await state.set_state(GameState.waiting_bet)
        await message.answer(
            "üé≥ <b>–ë–æ—É–ª–∏–Ω–≥ (–¥—É—ç–ª—å)</b>\n"
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x1.8\n\n"
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç 200 –¥–æ 20000 –º–æ–Ω–µ—Ç):",
            reply_markup=get_bet_input_keyboard()
        )

@router.message(F.text.in_(["üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", "–ë–∞—Å–∫–µ—Ç–±–æ–ª"]))
async def channel_basketball_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_games:
        if not await require_subscription(message.from_user.id):
            await message.answer(
                f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
                f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
                reply_markup=get_subscription_keyboard()
            )
            return

        await state.set_state(GameState.channel_basketball)
        await state.update_data(game_type="basketball")
        await state.set_state(GameState.waiting_bet)
        await message.answer(
            "üèÄ <b>–ë–∞—Å–∫–µ—Ç–±–æ–ª</b>\n"
            "üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ: x1.8\n"
            "‚ùå –ú–∏–º–æ: x1.3\n\n"
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç 200 –¥–æ 20000 –º–æ–Ω–µ—Ç):",
            reply_markup=get_bet_input_keyboard()
        )

@router.message(F.text.in_(["üé≤ –ö—É–±—ã", "üé≤ –ö—É–±—ã (–¥—É—ç–ª—å)", "–ö—É–±—ã –¥—É—ç–ª—å", "–ö—É–±—ã"]))
async def channel_dice_duel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_games:
        if not await require_subscription(message.from_user.id):
            await message.answer(
                f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
                f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
                reply_markup=get_subscription_keyboard()
            )
            return

        await state.set_state(GameState.channel_dice_duel)
        await state.update_data(game_type="dice_duel")
        await state.set_state(GameState.waiting_bet)
        await message.answer(
            "üé≤ <b>–ö—É–±—ã (–¥—É—ç–ª—å)</b>\n"
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x1.8\n\n"
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç 200 –¥–æ 20000 –º–æ–Ω–µ—Ç):",
            reply_markup=get_bet_input_keyboard()
        )

@router.message(F.text.in_(["üé≤ –ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ", "–ë–æ–ª—å—à–µ –º–µ–Ω—å—à–µ", "–ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ"]))
async def channel_dice_higher_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_games:
        if not await require_subscription(message.from_user.id):
            await message.answer(
                f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
                f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
                reply_markup=get_subscription_keyboard()
            )
            return

        await state.set_state(GameState.channel_dice_higher)
        await state.update_data(game_type="dice_higher")
        await state.set_state(GameState.waiting_bet)
        await message.answer(
            "üé≤ <b>–ö—É–±—ã –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ</b>\n"
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x1.8\n\n"
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç 200 –¥–æ 20000 –º–æ–Ω–µ—Ç):",
            reply_markup=get_bet_input_keyboard()
        )

@router.message(F.text.in_(["üé≤ –ß–µ—Ç/–Ω–µ—á–µ—Ç", "–ß–µ—Ç –Ω–µ—á–µ—Ç", "–ß–µ—Ç/–Ω–µ—á–µ—Ç"]))
async def channel_dice_even_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_games:
        if not await require_subscription(message.from_user.id):
            await message.answer(
                f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
                f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
                reply_markup=get_subscription_keyboard()
            )
            return

        await state.set_state(GameState.channel_dice_even)
        await state.update_data(game_type="dice_even")
        await state.set_state(GameState.waiting_bet)
        await message.answer(
            "üé≤ <b>–ö—É–±—ã —á–µ—Ç/–Ω–µ—á–µ—Ç</b>\n"
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x1.8\n\n"
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç 200 –¥–æ 20000 –º–æ–Ω–µ—Ç):",
            reply_markup=get_bet_input_keyboard()
        )

@router.message(F.text.in_(["üé≤ –¢—Ä–∏–∞–¥–∞", "–¢—Ä–∏–∞–¥–∞"]))
async def channel_triada_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_games:
        if not await require_subscription(message.from_user.id):
            await message.answer(
                f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
                f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
                reply_markup=get_subscription_keyboard()
            )
            return

        await state.set_state(GameState.channel_triada)
        await state.update_data(game_type="triada")
        await state.set_state(GameState.waiting_bet)
        await message.answer(
            "üé≤ <b>–¢—Ä–∏–∞–¥–∞</b>\n"
            "‚Ä¢ 1 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: x1.8\n"
            "‚Ä¢ 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: x2.4\n"
            "‚Ä¢ 3 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: x3.1\n\n"
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç 200 –¥–æ 20000 –º–æ–Ω–µ—Ç):",
            reply_markup=get_bet_input_keyboard()
        )

@router.message(F.text.in_(["üéØ –î–∞—Ä—Ç—Å", "–î–∞—Ä—Ç—Å"]))
async def channel_darts_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_games:
        if not await require_subscription(message.from_user.id):
            await message.answer(
                f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
                f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
                reply_markup=get_subscription_keyboard()
            )
            return

        await state.set_state(GameState.channel_darts)
        await state.update_data(game_type="darts")
        await state.set_state(GameState.waiting_bet)
        await message.answer(
            "üéØ <b>–î–∞—Ä—Ç—Å</b>\n"
            "üî¥ –ö—Ä–∞—Å–Ω–æ–µ: x1.8\n"
            "‚ö™ –ë–µ–ª–æ–µ: x1.8\n\n"
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç 200 –¥–æ 20000 –º–æ–Ω–µ—Ç):",
            reply_markup=get_bet_input_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–æ–∫
@router.message(GameState.waiting_bet)
async def process_bet_input(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await back_handler(message, state)
        return

    if not await require_subscription(message.from_user.id):
        await message.answer(
            f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
            reply_markup=get_subscription_keyboard()
        )
        return

    try:
        bet_amount = int(message.text)
        balance = get_balance(message.from_user.id)

        if bet_amount < 200:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 200 –º–æ–Ω–µ—Ç!")
            return

        if bet_amount > 20000:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 20000 –º–æ–Ω–µ—Ç!")
            return

        if bet_amount > balance:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
            return

        data = await state.get_data()
        await state.update_data(bet=bet_amount)

        # –ò–≥—Ä—ã –≤ –±–æ—Ç–µ
        if 'mines_count' in data:
            mines_count = data['mines_count']
            update_balance(message.from_user.id, -bet_amount)

            mines_positions = set()
            while len(mines_positions) < mines_count:
                mines_positions.add((random.randint(0, 4), random.randint(0, 4)))

            await state.update_data(
                mines_positions=list(mines_positions),
                opened_cells=[],
                clicks_count=0
            )
            await state.set_state(GameState.mines_game)

            keyboard = create_mines_inline_keyboard(mines_count, [], MINES_COEFFICIENTS[mines_count][0])
            await message.answer(
                f"üí£ <b>–ú–∏–Ω—ã ({mines_count} –º–∏–Ω—ã)</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} –º–æ–Ω–µ—Ç\n"
                f"üîç –ù–∞–π–¥–∏—Ç–µ –∞–ª–º–∞–∑—ã, –∏–∑–±–µ–≥–∞–π—Ç–µ –º–∏–Ω!\n"
                f"üíé –ö–ª–∏–∫–æ–≤: 0 | –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{MINES_COEFFICIENTS[mines_count][0]}",
                reply_markup=keyboard
            )

        elif 'tower_mines' in data:
            tower_mines = data['tower_mines']
            update_balance(message.from_user.id, -bet_amount)

            tower_structure = {}
            for level in range(6):
                mines_positions = set()
                while len(mines_positions) < tower_mines:
                    mines_positions.add(random.randint(0, 4))
                tower_structure[level] = list(mines_positions)

            await state.update_data(
                tower_structure=tower_structure,
                current_level=0,
                opened_levels=[]
            )
            await state.set_state(GameState.tower_game)

            keyboard = create_tower_inline_keyboard(tower_mines, [], 0)
            await message.answer(
                f"üèó <b>–ë–∞—à–Ω—è ({tower_mines} {'–º–∏–Ω–∞' if tower_mines == 1 else '–º–∏–Ω—ã'})</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} –º–æ–Ω–µ—Ç\n"
                f"üÜô –£—Ä–æ–≤–µ–Ω—å: 1/6\n"
                f"üèó –ü–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤—ã—à–µ, –∏–∑–±–µ–≥–∞—è –º–∏–Ω!",
                reply_markup=keyboard
            )

        # –ò–≥—Ä—ã –≤ –∫–∞–Ω–∞–ª–µ
        elif data.get('game_type') in ['bowling', 'dice_duel']:
            await state.set_state(GameState.channel_bowling if data.get('game_type') == 'bowling' else GameState.channel_dice_duel)
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:",
                reply_markup=get_bowling_choice_keyboard()
            )

        elif data.get('game_type') == 'basketball':
            await state.set_state(GameState.channel_basketball)
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:",
                reply_markup=get_basketball_keyboard()
            )

        elif data.get('game_type') == 'dice_higher':
            await state.set_state(GameState.channel_dice_higher)
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ:",
                reply_markup=get_dice_higher_lower_keyboard()
            )

        elif data.get('game_type') == 'dice_even':
            await state.set_state(GameState.channel_dice_even)
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ:",
                reply_markup=get_dice_even_odd_keyboard()
            )

        elif data.get('game_type') == 'triada':
            await state.set_state(GameState.channel_triada)
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ (1-6):",
                reply_markup=get_triada_keyboard()
            )

        elif data.get('game_type') == 'darts':
            await state.set_state(GameState.channel_darts)
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:",
                reply_markup=get_darts_keyboard()
            )

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–≥—Ä
@router.message(F.text.in_(["üèÜ –ü–æ–±–µ–¥–∞ (x1.8)", "üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ (x1.8)"]))
async def channel_choice_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state in [GameState.channel_bowling, GameState.channel_dice_duel]:
        data = await state.get_data()
        bet_amount = data['bet']
        game_type = data['game_type']
        choice = "win" if "–ü–æ–±–µ–¥–∞" in message.text else "loss"

        update_balance(message.from_user.id, -bet_amount)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
        bet_info = {
            'user': message.from_user,
            'bet_amount': bet_amount,
            'game_type': game_type,
            'choice': choice,
            'game_function': play_bowling_direct if game_type == "bowling" else play_dice_duel_direct
        }
        game_queue.append(bet_info)

        inline_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å", url="https://t.me/MoonCasino777"),
                InlineKeyboardButton(text="üé∞ –ò–≥—Ä–∞—Ç—å", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )

        await message.answer(
            f"‚úÖ <b>–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n"
            f"üéØ –ò–≥—Ä–∞: {'üé≥ –ë–æ—É–ª–∏–Ω–≥' if game_type == 'bowling' else 'üé≤ –ö—É–±—ã (–¥—É—ç–ª—å)'}\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} –º–æ–Ω–µ—Ç\n"
            f"üé≤ –í—ã–±–æ—Ä: {'üèÜ –ü–æ–±–µ–¥–∞' if choice == 'win' else 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}\n"
            f"üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {len(game_queue)}",
            reply_markup=inline_keyboard
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
        if not is_game_running:
            asyncio.create_task(process_game_queue())

        await state.set_state(GameState.channel_games)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–≥—Ä
@router.message(F.text.in_(["‚¨ÜÔ∏è –ë–æ–ª—å—à–µ", "‚¨áÔ∏è –ú–µ–Ω—å—à–µ"]))
async def channel_dice_higher_choice(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_dice_higher:
        data = await state.get_data()
        bet_amount = data['bet']
        choice = "higher" if "–ë–æ–ª—å—à–µ" in message.text else "lower"

        update_balance(message.from_user.id, -bet_amount)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
        bet_info = {
            'user': message.from_user,
            'bet_amount': bet_amount,
            'game_type': 'dice_higher',
            'choice': choice,
            'game_function': play_dice_higher_direct
        }
        game_queue.append(bet_info)

        choice_text = "‚¨ÜÔ∏è –ë–æ–ª—å—à–µ 3" if choice == "higher" else "‚¨áÔ∏è –ú–µ–Ω—å—à–µ 4"
        inline_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å", url="https://t.me/MoonCasino777"),
                InlineKeyboardButton(text="üé∞ –ò–≥—Ä–∞—Ç—å", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )
        await message.answer(
            f"‚úÖ <b>–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n"
            f"üéØ –ò–≥—Ä–∞: üé≤ –ö—É–±—ã –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} –º–æ–Ω–µ—Ç\n"
            f"üé≤ –í—ã–±–æ—Ä: {choice_text}\n"
            f"üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {len(game_queue)}",
            reply_markup=inline_keyboard
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
        if not is_game_running:
            asyncio.create_task(process_game_queue())

        await state.set_state(GameState.channel_games)

@router.message(F.text.in_(["2Ô∏è‚É£ –ß–µ—Ç–Ω–æ–µ", "1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–æ–µ"]))
async def channel_dice_even_choice(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_dice_even:
        data = await state.get_data()
        bet_amount = data['bet']
        choice = "even" if "–ß–µ—Ç–Ω–æ–µ" in message.text else "odd"

        update_balance(message.from_user.id, -bet_amount)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
        bet_info = {
            'user': message.from_user,
            'bet_amount': bet_amount,
            'game_type': 'dice_even',
            'choice': choice,
            'game_function': play_dice_even_direct
        }
        game_queue.append(bet_info)

        choice_text = "2Ô∏è‚É£ –ß–µ—Ç–Ω–æ–µ" if choice == "even" else "1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–æ–µ"
        inline_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å", url="https://t.me/MoonCasino777"),
                InlineKeyboardButton(text="üé∞ –ò–≥—Ä–∞—Ç—å", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )
        await message.answer(
            f"‚úÖ <b>–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n"
            f"üéØ –ò–≥—Ä–∞: üé≤ –ö—É–±—ã —á–µ—Ç/–Ω–µ—á–µ—Ç\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} –º–æ–Ω–µ—Ç\n"
            f"üé≤ –í—ã–±–æ—Ä: {choice_text}\n"
            f"üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {len(game_queue)}",
            reply_markup=inline_keyboard
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
        if not is_game_running:
            asyncio.create_task(process_game_queue())

        await state.set_state(GameState.channel_games)

@router.message(F.text.in_(["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£"]))
async def channel_triada_choice(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_triada:
        data = await state.get_data()
        bet_amount = data['bet']
        choice = message.text[0]  # –ü–æ–ª—É—á–∞–µ–º —Ü–∏—Ñ—Ä—É

        update_balance(message.from_user.id, -bet_amount)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
        bet_info = {
            'user': message.from_user,
            'bet_amount': bet_amount,
            'game_type': 'triada',
            'choice': choice,
            'game_function': play_triada_direct
        }
        game_queue.append(bet_info)

        inline_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å", url="https://t.me/MoonCasino777"),
                InlineKeyboardButton(text="üé∞ –ò–≥—Ä–∞—Ç—å", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )
        await message.answer(
            f"‚úÖ <b>–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n"
            f"üéØ –ò–≥—Ä–∞: üé≤ –¢—Ä–∏–∞–¥–∞\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} –º–æ–Ω–µ—Ç\n"
            f"üé≤ –í—ã–±–æ—Ä: {choice}\n"
            f"üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {len(game_queue)}",
            reply_markup=inline_keyboard
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
        if not is_game_running:
            asyncio.create_task(process_game_queue())

        await state.set_state(GameState.channel_games)

@router.message(F.text.in_(["üî¥ –ö—Ä–∞—Å–Ω–æ–µ (x1.8)", "‚ö™ –ë–µ–ª–æ–µ (x1.8)"]))
async def channel_darts_choice(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_darts:
        data = await state.get_data()
        bet_amount = data['bet']
        choice = "red" if "–ö—Ä–∞—Å–Ω–æ–µ" in message.text else "white"

        update_balance(message.from_user.id, -bet_amount)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
        bet_info = {
            'user': message.from_user,
            'bet_amount': bet_amount,
            'game_type': 'darts',
            'choice': choice,
            'game_function': play_darts_direct
        }
        game_queue.append(bet_info)

        choice_text = "üî¥ –ö—Ä–∞—Å–Ω–æ–µ" if choice == "red" else "‚ö™ –ë–µ–ª–æ–µ"
        inline_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å", url="https://t.me/MoonCasino777"),
                InlineKeyboardButton(text="üé∞ –ò–≥—Ä–∞—Ç—å", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )
        await message.answer(
            f"‚úÖ <b>–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n"
            f"üéØ –ò–≥—Ä–∞: üéØ –î–∞—Ä—Ç—Å\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} –º–æ–Ω–µ—Ç\n"
            f"üé≤ –í—ã–±–æ—Ä: {choice_text}\n"
            f"üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {len(game_queue)}",
            reply_markup=inline_keyboard
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
        if not is_game_running:
            asyncio.create_task(process_game_queue())

        await state.set_state(GameState.channel_games)

# –î–æ–±–∞–≤–∏–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–≥—Ä...
@router.message(F.text.in_(["üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ (x1.8)", "‚ùå –ú–∏–º–æ (x1.3)"]))
async def channel_basketball_choice(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_basketball:
        data = await state.get_data()
        bet_amount = data['bet']
        choice = "hit" if "–ü–æ–ø–∞–¥–∞–Ω–∏–µ" in message.text else "miss"

        update_balance(message.from_user.id, -bet_amount)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
        bet_info = {
            'user': message.from_user,
            'bet_amount': bet_amount,
            'game_type': 'basketball',
            'choice': choice,
            'game_function': play_basketball_direct
        }
        game_queue.append(bet_info)

        choice_text = "üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ" if choice == "hit" else "‚ùå –ú–∏–º–æ"
        coeff = "x1.8" if choice == "hit" else "x1.3"
        inline_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å", url="https://t.me/MoonCasino777"),
                InlineKeyboardButton(text="üé∞ –ò–≥—Ä–∞—Ç—å", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )
        await message.answer(
            f"‚úÖ <b>–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n"
            f"üéØ –ò–≥—Ä–∞: üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} –º–æ–Ω–µ—Ç\n"
            f"üé≤ –í—ã–±–æ—Ä: {choice_text} ({coeff})\n"
            f"üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {len(game_queue)}",
            reply_markup=inline_keyboard
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
        if not is_game_running:
            asyncio.create_task(process_game_queue())

        await state.set_state(GameState.channel_games)

# –ü—Ä—è–º—ã–µ –∏–≥—Ä—ã –≤ –∫–∞–Ω–∞–ª–µ
async def play_bowling_direct(message: Message, bet_amount: int, choice: str):
    try:
        # –ö–∏–¥–∞–µ–º –∫–µ–≥–ª–∏ –∏–≥—Ä–æ–∫–∞
        user_bowling = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≥")
        await asyncio.sleep(4)
        user_pins = user_bowling.dice.value

        # –ö–∏–¥–∞–µ–º –∫–µ–≥–ª–∏ –±–æ—Ç–∞
        await bot.send_message(CHANNEL_ID, "ü§ñ –ë–æ—Ç –∫–∏–¥–∞–µ—Ç...")
        bot_bowling = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≥")
        await asyncio.sleep(4)
        bot_pins = bot_bowling.dice.value

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        actual_result = "win" if user_pins > bot_pins else "loss"
        win = choice == actual_result

        if win:
            win_amount = int(bet_amount * 1.8)
            update_balance(message.from_user.id, win_amount)
            update_game_stats(message.from_user.id, "–ë–æ—É–ª–∏–Ω–≥", win_amount)

            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            stats = get_user_stats(message.from_user.id)
            if stats and stats['referrer_id']:
                bonus = int(win_amount * 0.05)  # 5%
                add_referral_bonus(stats['referrer_id'], bonus)
                try:
                    await bot.send_message(
                        stats['referrer_id'],
                        f"üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n"
                        f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª –≤ –±–æ—É–ª–∏–Ω–≥\n"
                        f"üéÅ –í–∞—à –±–æ–Ω—É—Å: {bonus} –º–æ–Ω–µ—Ç (5%)"
                    )
                except:
                    pass

            result_text = f"üéâ <b>–ü–û–ë–ï–î–ê!</b>\nüí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç"
        else:
            update_game_stats(message.from_user.id, "–ë–æ—É–ª–∏–Ω–≥", 0)
            result_text = f"üò¢ <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–µ</b>\nüí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç"

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )

        await bot.send_message(
            CHANNEL_ID,
            f"üé≥ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
            f"üë§ –ò–≥—Ä–æ–∫: {message.from_user.first_name} (@{message.from_user.username or '–±–µ–∑_–Ω–∏–∫–∞'})\n"
            f"üéØ –ò–≥—Ä–æ–∫: {user_pins} –∫–µ–≥–ª–µ–π | ü§ñ –ë–æ—Ç: {bot_pins} –∫–µ–≥–ª–µ–π\n"
            f"üé≤ –í—ã–±–æ—Ä: {'üèÜ –ü–æ–±–µ–¥–∞' if choice == 'win' else 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}\n\n"
            f"{result_text}",
            reply_markup=channel_keyboard
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ
        bot_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]
        )

        if win:
            await bot.send_message(
                message.from_user.id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</b>\n\n"
                f"üé≥ –ò–≥—Ä–∞: –ë–æ—É–ª–∏–Ω–≥\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω: {get_balance(message.from_user.id)} –º–æ–Ω–µ—Ç",
                reply_markup=bot_keyboard
            )
        else:
            await bot.send_message(
                message.from_user.id,
                f"üòî <b>–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ :)</b>\n\n"
                f"üé≥ –ò–≥—Ä–∞: –ë–æ—É–ª–∏–Ω–≥\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_balance(message.from_user.id)} –º–æ–Ω–µ—Ç",
                reply_markup=bot_keyboard
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –±–æ—É–ª–∏–Ω–≥–µ: {e}")

async def play_dice_duel_direct(message: Message, bet_amount: int, choice: str):
    try:
        user_dice = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
        await asyncio.sleep(4)
        user_roll = user_dice.dice.value

        await bot.send_message(CHANNEL_ID, "ü§ñ –ë–æ—Ç –∫–∏–¥–∞–µ—Ç...")
        bot_dice = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
        await asyncio.sleep(4)
        bot_roll = bot_dice.dice.value

        actual_result = "win" if user_roll > bot_roll else "loss"
        win = choice == actual_result

        if win:
            win_amount = int(bet_amount * 1.8)
            update_balance(message.from_user.id, win_amount)
            update_game_stats(message.from_user.id, "–ö—É–±—ã (–¥—É—ç–ª—å)", win_amount)

            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            stats = get_user_stats(message.from_user.id)
            if stats and stats['referrer_id']:
                bonus = int(win_amount * 0.05)  # 5%
                add_referral_bonus(stats['referrer_id'], bonus)
                try:
                    await bot.send_message(
                        stats['referrer_id'],
                        f"üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n"
                        f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª –≤ –∫—É–±—ã (–¥—É—ç–ª—å)\n"
                        f"üéÅ –í–∞—à –±–æ–Ω—É—Å: {bonus} –º–æ–Ω–µ—Ç (5%)"
                    )
                except:
                    pass

            result_text = f"üéâ <b>–ü–û–ë–ï–î–ê!</b>\nüí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç"
        else:
            update_game_stats(message.from_user.id, "–ö—É–±—ã (–¥—É—ç–ª—å)", 0)
            result_text = f"üò¢ <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–µ</b>\nüí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç"

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )

        await bot.send_message(
            CHANNEL_ID,
            f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
            f"üë§ –ò–≥—Ä–æ–∫: {message.from_user.first_name} (@{message.from_user.username or '–±–µ–∑_–Ω–∏–∫–∞'})\n"
            f"üéØ –ò–≥—Ä–æ–∫: {user_roll} | ü§ñ –ë–æ—Ç: {bot_roll}\n"
            f"üé≤ –í—ã–±–æ—Ä: {'üèÜ –ü–æ–±–µ–¥–∞' if choice == 'win' else 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}\n\n"
            f"{result_text}",
            reply_markup=channel_keyboard
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ
        bot_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]
        )

        if win:
            await bot.send_message(
                message.from_user.id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</b>\n\n"
                f"üé≤ –ò–≥—Ä–∞: –ö—É–±—ã (–¥—É—ç–ª—å)\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω: {get_balance(message.from_user.id)} –º–æ–Ω–µ—Ç",
                reply_markup=bot_keyboard
            )
        else:
            await bot.send_message(
                message.from_user.id,
                f"üòî <b>–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ :)</b>\n\n"
                f"üé≤ –ò–≥—Ä–∞: –ö—É–±—ã (–¥—É—ç–ª—å)\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_balance(message.from_user.id)} –º–æ–Ω–µ—Ç",
                reply_markup=bot_keyboard
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫—É–±–∞—Ö: {e}")

async def play_basketball_direct(message: Message, bet_amount: int, choice: str):
    try:
        basketball = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üèÄ")
        await asyncio.sleep(4)
        basketball_value = basketball.dice.value

        actual_result = "hit" if basketball_value >= 4 else "miss"
        win = choice == actual_result

        if win:
            coeff = 1.8 if choice == 'hit' else 1.3
            win_amount = int(bet_amount * coeff)
            update_balance(message.from_user.id, win_amount)
            update_game_stats(message.from_user.id, "–ë–∞—Å–∫–µ—Ç–±–æ–ª", win_amount)

            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            stats = get_user_stats(message.from_user.id)
            if stats and stats['referrer_id']:
                bonus = int(win_amount * 0.05)  # 5%
                add_referral_bonus(stats['referrer_id'], bonus)
                try:
                    await bot.send_message(
                        stats['referrer_id'],
                        f"üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n"
                        f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª\n"
                        f"üéÅ –í–∞—à –±–æ–Ω—É—Å: {bonus} –º–æ–Ω–µ—Ç (5%)"
                    )
                except:
                    pass
            result_text = f"üéâ <b>–ü–û–ë–ï–î–ê!</b>\nüí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç (x{coeff})"
        else:
            update_game_stats(message.from_user.id, "–ë–∞—Å–∫–µ—Ç–±–æ–ª", 0)
            result_text = f"üò¢ <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–µ</b>\nüí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç"

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )

        await bot.send_message(
            CHANNEL_ID,
            f"üèÄ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
            f"üë§ –ò–≥—Ä–æ–∫: {message.from_user.first_name} (@{message.from_user.username or '–±–µ–∑_–Ω–∏–∫–∞'})\n"
            f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ' if actual_result == 'hit' else '‚ùå –ú–∏–º–æ'} ({basketball_value})\n"
            f"üé≤ –í—ã–±–æ—Ä: {'üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ' if choice == 'hit' else '‚ùå –ú–∏–º–æ'}\n\n"
            f"{result_text}",
            reply_markup=channel_keyboard
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ
        bot_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]
        )

        if win:
            coeff = 1.8 if choice == 'hit' else 1.3
            await bot.send_message(
                message.from_user.id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</b>\n\n"
                f"üèÄ –ò–≥—Ä–∞: –ë–∞—Å–∫–µ—Ç–±–æ–ª\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç (x{coeff})\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω: {get_balance(message.from_user.id)} –º–æ–Ω–µ—Ç",
                reply_markup=bot_keyboard
            )
        else:
            await bot.send_message(
                message.from_user.id,
                f"üòî <b>–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ :)</b>\n\n"
                f"üèÄ –ò–≥—Ä–∞: –ë–∞—Å–∫–µ—Ç–±–æ–ª\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_balance(message.from_user.id)} –º–æ–Ω–µ—Ç",
                reply_markup=bot_keyboard
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª–µ: {e}")

async def play_dice_higher_direct(message: Message, bet_amount: int, choice: str):
    try:
        dice = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
        await asyncio.sleep(4)
        dice_value = dice.dice.value

        actual_result = "higher" if dice_value > 3 else "lower"
        win = choice == actual_result

        if win:
            win_amount = int(bet_amount * 1.8)
            update_balance(message.from_user.id, win_amount)
            update_game_stats(message.from_user.id, "–ö—É–±—ã –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ", win_amount)

            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            stats = get_user_stats(message.from_user.id)
            if stats and stats['referrer_id']:
                bonus = int(win_amount * 0.05)  # 5%
                add_referral_bonus(stats['referrer_id'], bonus)
                try:
                    await bot.send_message(
                        stats['referrer_id'],
                        f"üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n"
                        f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª –≤ –∫—É–±—ã –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ\n"
                        f"üéÅ –í–∞—à –±–æ–Ω—É—Å: {bonus} –º–æ–Ω–µ—Ç (5%)"
                    )
                except:
                    pass
            result_text = f"üéâ <b>–ü–û–ë–ï–î–ê!</b>\nüí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç"
        else:
            update_game_stats(message.from_user.id, "–ö—É–±—ã –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ", 0)
            result_text = f"üò¢ <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–µ</b>\nüí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç"

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )

        await bot.send_message(
            CHANNEL_ID,
            f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
            f"üë§ –ò–≥—Ä–æ–∫: {message.from_user.first_name} (@{message.from_user.username or '–±–µ–∑_–Ω–∏–∫–∞'})\n"
            f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {dice_value}\n"
            f"üé≤ –í—ã–±–æ—Ä: {'‚¨ÜÔ∏è –ë–æ–ª—å—à–µ 3' if choice == 'higher' else '‚¨áÔ∏è –ú–µ–Ω—å—à–µ 4'}\n\n"
            f"{result_text}",
            reply_markup=channel_keyboard
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ
        bot_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]
        )

        if win:
            await bot.send_message(
                message.from_user.id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</b>\n\n"
                f"üé≤ –ò–≥—Ä–∞: –ö—É–±—ã –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω: {get_balance(message.from_user.id)} –º–æ–Ω–µ—Ç",
                reply_markup=bot_keyboard
            )
        else:
            await bot.send_message(
                message.from_user.id,
                f"üòî <b>–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ :)</b>\n\n"
                f"üé≤ –ò–≥—Ä–∞: –ö—É–±—ã –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_balance(message.from_user.id)} –º–æ–Ω–µ—Ç",
                reply_markup=bot_keyboard
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫—É–±–∞—Ö –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ: {e}")

async def play_dice_even_direct(message: Message, bet_amount: int, choice: str):
    try:
        dice = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
        await asyncio.sleep(4)
        dice_value = dice.dice.value

        actual_result = "even" if dice_value % 2 == 0 else "odd"
        win = choice == actual_result

        if win:
            win_amount = int(bet_amount * 1.8)
            update_balance(message.from_user.id, win_amount)
            update_game_stats(message.from_user.id, "–ö—É–±—ã —á–µ—Ç/–Ω–µ—á–µ—Ç", win_amount)

            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            stats = get_user_stats(message.from_user.id)
            if stats and stats['referrer_id']:
                bonus = int(win_amount * 0.05)  # 5%
                add_referral_bonus(stats['referrer_id'], bonus)
                try:
                    await bot.send_message(
                        stats['referrer_id'],
                        f"üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n"
                        f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª –≤ –∫—É–±—ã —á–µ—Ç/–Ω–µ—á–µ—Ç\n"
                        f"üéÅ –í–∞—à –±–æ–Ω—É—Å: {bonus} –º–æ–Ω–µ—Ç (5%)"
                    )
                except:
                    pass

            result_text = f"üéâ <b>–ü–û–ë–ï–î–ê!</b>\nüí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç"
        else:
            update_game_stats(message.from_user.id, "–ö—É–±—ã —á–µ—Ç/–Ω–µ—á–µ—Ç", 0)
            result_text = f"üò¢ <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–µ</b>\nüí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç"

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )

        await bot.send_message(
            CHANNEL_ID,
            f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
            f"üë§ –ò–≥—Ä–æ–∫: {message.from_user.first_name} (@{message.from_user.username or '–±–µ–∑_–Ω–∏–∫–∞'})\n"
            f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {dice_value}\n"
            f"üé≤ –í—ã–±–æ—Ä: {'2Ô∏è‚É£ –ß–µ—Ç–Ω–æ–µ' if choice == 'even' else '1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–æ–µ'}\n\n"
            f"{result_text}",
            reply_markup=channel_keyboard
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ
        bot_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]
        )

        if win:
            await bot.send_message(
                message.from_user.id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</b>\n\n"
                f"üé≤ –ò–≥—Ä–∞: –ö—É–±—ã —á–µ—Ç/–Ω–µ—á–µ—Ç\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω: {get_balance(message.from_user.id)} –º–æ–Ω–µ—Ç",
                reply_markup=bot_keyboard
            )
        else:
            await bot.send_message(
                message.from_user.id,
                f"üòî <b>–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ :)</b>\n\n"
                f"üé≤ –ò–≥—Ä–∞: –ö—É–±—ã —á–µ—Ç/–Ω–µ—á–µ—Ç\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_balance(message.from_user.id)} –º–æ–Ω–µ—Ç",
                reply_markup=bot_keyboard
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫—É–±–∞—Ö —á–µ—Ç/–Ω–µ—á–µ—Ç: {e}")

async def play_triada_direct(message: Message, bet_amount: int, choice: str):
    try:
        await bot.send_message(CHANNEL_ID, "üé≤ –ö–∏–¥–∞–µ–º 3 –∫—É–±–∏–∫–∞...")
        dice1 = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
        await asyncio.sleep(2)
        dice2 = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
        await asyncio.sleep(2)
        dice3 = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
        await asyncio.sleep(2)

        dice_values = [dice1.dice.value, dice2.dice.value, dice3.dice.value]
        choice_num = int(choice)

        matches = dice_values.count(choice_num)
        coeff = 1.8 if matches == 1 else 2.4 if matches == 2 else 3.1 if matches == 3 else 0

        if coeff > 0:
            win_amount = int(bet_amount * coeff)
            update_balance(message.from_user.id, win_amount)
            update_game_stats(message.from_user.id, "–¢—Ä–∏–∞–¥–∞", win_amount)

            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            stats = get_user_stats(message.from_user.id)
            if stats and stats['referrer_id']:
                bonus = int(win_amount * 0.05)  # 5%
                add_referral_bonus(stats['referrer_id'], bonus)
                try:
                    await bot.send_message(
                        stats['referrer_id'],
                        f"üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n"
                        f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª –≤ —Ç—Ä–∏–∞–¥—É\n"
                        f"üéÅ –í–∞—à –±–æ–Ω—É—Å: {bonus} –º–æ–Ω–µ—Ç (5%)"
                    )
                except:
                    pass

            result_text = f"üéâ <b>–ü–û–ë–ï–î–ê!</b>\nüí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç (x{coeff})"
        else:
            update_game_stats(message.from_user.id, "–¢—Ä–∏–∞–¥–∞", 0)
            result_text = f"üò¢ <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–µ</b>\nüí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç"

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )

        await bot.send_message(
            CHANNEL_ID,
            f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
            f"üë§ –ò–≥—Ä–æ–∫: {message.from_user.first_name} (@{message.from_user.username or '–±–µ–∑_–Ω–∏–∫–∞'})\n"
            f"üéØ –ö—É–±–∏–∫–∏: {dice1.dice.value}, {dice2.dice.value}, {dice3.dice.value}\n"
            f"üé≤ –í—ã–±–æ—Ä: {choice}\n"
            f"‚ú® –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches}\n\n"
            f"{result_text}",
            reply_markup=channel_keyboard
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ
        bot_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]
        )

        if coeff > 0:
            await bot.send_message(
                message.from_user.id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</b>\n\n"
                f"üé≤ –ò–≥—Ä–∞: –¢—Ä–∏–∞–¥–∞\n"
                f"‚ú® –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches}\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç (x{coeff})\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω: {get_balance(message.from_user.id)} –º–æ–Ω–µ—Ç",
                reply_markup=bot_keyboard
            )
        else:
            await bot.send_message(
                message.from_user.id,
                f"üòî <b>–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ :)</b>\n\n"
                f"üé≤ –ò–≥—Ä–∞: –¢—Ä–∏–∞–¥–∞\n"
                f"‚ú® –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches}\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_balance(message.from_user.id)} –º–æ–Ω–µ—Ç",
                reply_markup=bot_keyboard
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ç—Ä–∏–∞–¥–µ: {e}")

async def process_game_queue():
    global is_game_running
    is_game_running = True

    while game_queue:
        bet_info = game_queue.pop(0)
        user = bet_info['user']

        try:
            # –°–æ–∑–¥–∞–µ–º mock message –æ–±—ä–µ–∫—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∏–≥—Ä
            class MockMessage:
                def __init__(self, user):
                    self.from_user = user

            mock_message = MockMessage(user)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –≤ –∫–∞–Ω–∞–ª
            game_names = {
                'bowling': 'üé≥ –ë–æ—É–ª–∏–Ω–≥',
                'dice_duel': 'üé≤ –ö—É–±—ã (–¥—É—ç–ª—å)',
                'basketball': 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª',
                'dice_higher': 'üé≤ –ö—É–±—ã –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ',
                'dice_even': 'üé≤ –ö—É–±—ã —á–µ—Ç/–Ω–µ—á–µ—Ç',
                'triada': 'üé≤ –¢—Ä–∏–∞–¥–∞',
                'darts': 'üéØ –î–∞—Ä—Ç—Å'
            }

            choice_texts = {
                ('bowling', 'win'): 'üèÜ –ü–æ–±–µ–¥–∞',
                ('bowling', 'loss'): 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ',
                ('dice_duel', 'win'): 'üèÜ –ü–æ–±–µ–¥–∞',
                ('dice_duel', 'loss'): 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ',
                ('basketball', 'hit'): 'üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ',
                ('basketball', 'miss'): '‚ùå –ú–∏–º–æ',
                ('dice_higher', 'higher'): '‚¨ÜÔ∏è –ë–æ–ª—å—à–µ 3',
                ('dice_higher', 'lower'): '‚¨áÔ∏è –ú–µ–Ω—å—à–µ 4',
                ('dice_even', 'even'): '2Ô∏è‚É£ –ß–µ—Ç–Ω–æ–µ',
                ('dice_even', 'odd'): '1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–æ–µ',
                ('darts', 'red'): 'üî¥ –ö—Ä–∞—Å–Ω–æ–µ',
                ('darts', 'white'): '‚ö™ –ë–µ–ª–æ–µ'
            }

            game_name = game_names.get(bet_info['game_type'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞')
            choice_text = choice_texts.get((bet_info['game_type'], bet_info['choice']), str(bet_info['choice']))

            await bot.send_message(
                CHANNEL_ID,
                f"üéÆ <b>–ù–æ–≤–∞—è –∏–≥—Ä–∞!</b>\n\n"
                f"üë§ –ò–≥—Ä–æ–∫: {user.first_name} (@{user.username or '–±–µ–∑_–Ω–∏–∫–∞'})\n"
                f"üéØ –ò–≥—Ä–∞: {game_name}\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_info['bet_amount']} –º–æ–Ω–µ—Ç\n"
                f"üé≤ –í—ã–±–æ—Ä: {choice_text}\n\n"
                f"üéÆ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É..."
            )

            await asyncio.sleep(1)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
            await bet_info['game_function'](mock_message, bet_info['bet_amount'], bet_info['choice'])

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏
            await asyncio.sleep(3)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            update_balance(user.id, bet_info['bet_amount'])

    is_game_running = False

async def play_darts_direct(message: Message, bet_amount: int, choice: str):
    try:
        darts = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üéØ")
        await asyncio.sleep(4)
        darts_value = darts.dice.value

        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –¥–ª—è –¥–∞—Ä—Ç—Å (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        actual_result = "red" if darts_value in [2, 4, 6] else "white"
        win = choice == actual_result

        if win:
            win_amount = int(bet_amount * 1.8)
            update_balance(message.from_user.id, win_amount)
            update_game_stats(message.from_user.id, "–î–∞—Ä—Ç—Å", win_amount)

            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            stats = get_user_stats(message.from_user.id)
            if stats and stats['referrer_id']:
                bonus = int(win_amount * 0.05)  # 5%
                add_referral_bonus(stats['referrer_id'], bonus)
                try:
                    await bot.send_message(
                        stats['referrer_id'],
                        f"üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n"
                        f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª –≤ –¥–∞—Ä—Ç—Å\n"
                        f"üéÅ –í–∞—à –±–æ–Ω—É—Å: {bonus} –º–æ–Ω–µ—Ç (5%)"
                    )
                except:
                    pass

            result_text = f"üéâ <b>–ü–û–ë–ï–î–ê!</b>\nüí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç"
        else:
            update_game_stats(message.from_user.id, "–î–∞—Ä—Ç—Å", 0)
            result_text = f"üò¢ <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–µ</b>\nüí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç"

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )

        await bot.send_message(
            CHANNEL_ID,
            f"üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
            f"üë§ –ò–≥—Ä–æ–∫: {message.from_user.first_name} (@{message.from_user.username or '–±–µ–∑_–Ω–∏–∫–∞'})\n"
            f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'üî¥ –ö—Ä–∞—Å–Ω–æ–µ' if actual_result == 'red' else '‚ö™ –ë–µ–ª–æ–µ'} ({darts_value})\n"
            f"üé≤ –í—ã–±–æ—Ä: {'üî¥ –ö—Ä–∞—Å–Ω–æ–µ' if choice == 'red' else '‚ö™ –ë–µ–ª–æ–µ'}\n\n"
            f"{result_text}",
            reply_markup=channel_keyboard
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ
        bot_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]
        )

        if win:
            await bot.send_message(
                message.from_user.id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</b>\n\n"
                f"üéØ –ò–≥—Ä–∞: –î–∞—Ä—Ç—Å\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω: {get_balance(message.from_user.id)} –º–æ–Ω–µ—Ç",
                reply_markup=bot_keyboard
            )
        else:
            await bot.send_message(
                message.from_user.id,
                f"üòî <b>–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ :)</b>\n\n"
                f"üéØ –ò–≥—Ä–∞: –î–∞—Ä—Ç—Å\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_balance(message.from_user.id)} –º–æ–Ω–µ—Ç",
                reply_markup=bot_keyboard
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –¥–∞—Ä—Ç—Å: {e}")

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state == GameState.play_menu:
        await state.set_state(GameState.main_menu)
        balance = get_balance(message.from_user.id)
        await message.answer(
            f"üé∞ <b>MoonCasino</b>\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance}</b> –º–æ–Ω–µ—Ç",
            reply_markup=get_start_keyboard()
        )
    elif current_state == GameState.profile:
        await state.set_state(GameState.main_menu)
        balance = get_balance(message.from_user.id)
        await message.answer(
            f"üé∞ <b>MoonCasino</b>\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance}</b> –º–æ–Ω–µ—Ç",
            reply_markup=get_start_keyboard()
        )
    elif current_state in [GameState.bot_games, GameState.channel_games]:
        await state.set_state(GameState.play_menu)
        await message.answer(
            "üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:</b>",
            reply_markup=get_play_menu_keyboard()
        )
    elif current_state in [GameState.mines_setup, GameState.tower_setup]:
        await state.set_state(GameState.bot_games)
        await message.answer(
            "ü§ñ <b>–ò–≥—Ä—ã –≤ –±–æ—Ç–µ:</b>\n\n"
            "üí£ <b>–ú–∏–Ω—ã</b> - –Ω–∞–π–¥–∏—Ç–µ –∞–ª–º–∞–∑—ã, –∏–∑–±–µ–≥–∞—è –º–∏–Ω\n"
            "üèó <b>–ë–∞—à–Ω—è</b> - –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤—ã—à–µ –ø–æ —É—Ä–æ–≤–Ω—è–º",
            reply_markup=get_bot_games_keyboard()
        )
    elif current_state in [GameState.channel_bowling, GameState.channel_basketball, 
                          GameState.channel_dice_duel, GameState.channel_dice_higher,
                          GameState.channel_dice_even, GameState.channel_triada, 
                          GameState.channel_darts]:
        await state.set_state(GameState.channel_games)
        await message.answer(
            "üí¨ <b>–ò–≥—Ä—ã –≤ –∫–∞–Ω–∞–ª–µ:</b>\n\n"
            "üé≥ <b>–ë–æ—É–ª–∏–Ω–≥</b> - –¥—É—ç–ª—å x1.8\n"
            "üèÄ <b>–ë–∞—Å–∫–µ—Ç–±–æ–ª</b> - –ø–æ–ø–∞–¥–∞–Ω–∏–µ x1.8, –º–∏–º–æ x1.3\n"
            "üé≤ <b>–ö—É–±—ã (–¥—É—ç–ª—å)</b> - x1.8\n"
            "üé≤ <b>–ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ</b> - x1.8\n"
            "üé≤ <b>–ß–µ—Ç/–Ω–µ—á–µ—Ç</b> - x1.8\n"
            "üé≤ <b>–¢—Ä–∏–∞–¥–∞</b> - 1 —Å–æ–≤–ø. x1.8, 2 —Å–æ–≤–ø. x2.4, 3 —Å–æ–≤–ø. x3.1\n"
            "üéØ <b>–î–∞—Ä—Ç—Å</b> - x1.8",
            reply_markup=get_channel_games_keyboard()
        )
    elif current_state == GameState.waiting_bet:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑ –∫–∞–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏—à–ª–∏ –≤ waiting_bet
        data = await state.get_data()
        if 'mines_count' in data or 'tower_mines' in data:
            await state.set_state(GameState.bot_games)
            await message.answer(
                "ü§ñ <b>–ò–≥—Ä—ã –≤ –±–æ—Ç–µ:</b>\n\n"
                "üí£ <b>–ú–∏–Ω—ã</b> - –Ω–∞–π–¥–∏—Ç–µ –∞–ª–º–∞–∑—ã, –∏–∑–±–µ–≥–∞—è –º–∏–Ω\n"
                "üèó <b>–ë–∞—à–Ω—è</b> - –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤—ã—à–µ –ø–æ —É—Ä–æ–≤–Ω—è–º",
                reply_markup=get_bot_games_keyboard()
            )
        else:
            await state.set_state(GameState.channel_games)
            await message.answer(
                "üí¨ <b>–ò–≥—Ä—ã –≤ –∫–∞–Ω–∞–ª–µ:</b>\n\n"
                "üé≥ <b>–ë–æ—É–ª–∏–Ω–≥</b> - –¥—É—ç–ª—å x1.8\n"
                "üèÄ <b>–ë–∞—Å–∫–µ—Ç–±–æ–ª</b> - –ø–æ–ø–∞–¥–∞–Ω–∏–µ x1.8, –º–∏–º–æ x1.3\n"
                "üé≤ <b>–ö—É–±—ã (–¥—É—ç–ª—å)</b> - x1.8\n"
                "üé≤ <b>–ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ</b> - x1.8\n"
                "üé≤ <b>–ß–µ—Ç/–Ω–µ—á–µ—Ç</b> - x1.8\n"
                "üé≤ <b>–¢—Ä–∏–∞–¥–∞</b> - 1 —Å–æ–≤–ø. x1.8, 2 —Å–æ–≤–ø. x2.4, 3 —Å–æ–≤–ø. x3.1\n"
                "üéØ <b>–î–∞—Ä—Ç—Å</b> - x1.8",
                reply_markup=get_channel_games_keyboard()
            )
    else:
         await state.set_state(GameState.main_menu)
         balance = get_balance(message.from_user.id)
         await message.answer(
            f"üé∞ <b>MoonCasino</b>\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance}</b> –º–æ–Ω–µ—Ç",
            reply_markup=get_start_keyboard()
        )

# Callback handlers –¥–ª—è –º–∏–Ω
@router.callback_query(F.data.startswith("mines_"))
async def mines_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if callback.data == "mines_cash_out":
        bet_amount = data['bet']
        clicks_count = data['clicks_count']
        mines_count = data['mines_count']

        if clicks_count > 0:
            current_coeff = MINES_COEFFICIENTS[mines_count][clicks_count - 1]
            win_amount = int(bet_amount * current_coeff)
            update_balance(callback.from_user.id, win_amount)

            await callback.message.edit_text(
                f"üí∞ <b>–í—ã–∏–≥—Ä—ã—à –∑–∞–±—Ä–∞–Ω!</b>\n"
                f"üíé –û—Ç–∫—Ä—ã—Ç–æ —è—á–µ–µ–∫: {clicks_count}\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç (x{current_coeff})\n"
                f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(callback.from_user.id)} –º–æ–Ω–µ—Ç"
            )

        await state.set_state(GameState.main_menu)
        await callback.answer("–í—ã–∏–≥—Ä—ã—à –∑–∞–±—Ä–∞–Ω!")
        return

    elif callback.data == "mines_exit":
        await callback.message.edit_text("‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –≤—ã–∏–≥—Ä—ã—à–∞")
        await state.set_state(GameState.main_menu)
        await callback.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return

    coords = callback.data.split("_")[1:]
    row, col = int(coords[0]), int(coords[1])

    mines_positions = data['mines_positions']
    opened_cells = data['opened_cells']
    clicks_count = data['clicks_count']
    mines_count = data['mines_count']
    bet_amount = data['bet']

    if (row, col) in opened_cells:
        await callback.answer("–≠—Ç–∞ —è—á–µ–π–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!")
        return

    if (row, col) in mines_positions:
        await callback.message.edit_text(
            f"üí• <b>–ë–£–ú! –í—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –º–∏–Ω—É!</b>\n"
            f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç\n"
            f"üí≥ –ë–∞–ª–∞–Ω—Å: {get_balance(callback.from_user.id)} –º–æ–Ω–µ—Ç"
        )
        await state.set_state(GameState.main_menu)
        await callback.answer("üí• –ú–∏–Ω–∞!")
        return

    opened_cells.append((row, col))
    clicks_count += 1

    await state.update_data(opened_cells=opened_cells, clicks_count=clicks_count)

    current_coeff = MINES_COEFFICIENTS[mines_count][clicks_count - 1] if clicks_count <= len(MINES_COEFFICIENTS[mines_count]) else MINES_COEFFICIENTS[mines_count][-1]

    keyboard = create_mines_inline_keyboard(mines_count, opened_cells, current_coeff)

    await callback.message.edit_text(
        f"üí£ <b>–ú–∏–Ω—ã ({mines_count} –º–∏–Ω—ã)</b>\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} –º–æ–Ω–µ—Ç\n"
        f"üîç –ù–∞–π–¥–∏—Ç–µ –∞–ª–º–∞–∑—ã, –∏–∑–±–µ–≥–∞–π—Ç–µ –º–∏–Ω!\n"
        f"üíé –ö–ª–∏–∫–æ–≤: {clicks_count} | –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{current_coeff}",
        reply_markup=keyboard
    )

    await callback.answer("üíé –ê–ª–º–∞–∑ –Ω–∞–π–¥–µ–Ω!")

# Callback handlers –¥–ª—è –±–∞—à–Ω–∏
@router.callback_query(F.data.startswith("tower_"))
async def tower_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if callback.data == "tower_cash_out":
        bet_amount = data['bet']
        current_level = data['current_level']
        tower_mines = data['tower_mines']

        if current_level > 0:
            coeffs = TOWER_COEFFICIENTS[tower_mines]
            final_coeff = coeffs[current_level - 1] if current_level - 1 < len(coeffs) else coeffs[-1]
            win_amount = int(bet_amount * final_coeff)
            update_balance(callback.from_user.id, win_amount)

            await callback.message.edit_text(
                f"üí∞ <b>–í—ã–∏–≥—Ä—ã—à –∑–∞–±—Ä–∞–Ω!</b>\n"
                f"üÜô –î–æ—Å—Ç–∏–≥–Ω—É—Ç —É—Ä–æ–≤–µ–Ω—å: {current_level}\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç (x{final_coeff})\n"
                f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(callback.from_user.id)} –º–æ–Ω–µ—Ç"
            )

        await state.set_state(GameState.main_menu)
        await callback.answer("–í—ã–∏–≥—Ä—ã—à –∑–∞–±—Ä–∞–Ω!")
        return

    elif callback.data == "tower_exit":
        await callback.message.edit_text("‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        await state.set_state(GameState.main_menu)
        await callback.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return

    coords = callback.data.split("_")[1:]
    level, cell = int(coords[0]), int(coords[1])

    tower_structure = data['tower_structure']
    opened_levels = data['opened_levels']
    current_level = data['current_level']
    tower_mines = data['tower_mines']
    bet_amount = data['bet']

    if level != current_level:
        await callback.answer("–ú–æ–∂–Ω–æ –∫–ª–∏–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ!")
        return

    if cell in tower_structure[level]:
        await callback.message.edit_text(
            f"üí• <b>–ë–£–ú! –í—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –º–∏–Ω—É –Ω–∞ —É—Ä–æ–≤–Ω–µ {level + 1}!</b>\n"
            f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet_amount} –º–æ–Ω–µ—Ç\n"
            f"üí≥ –ë–∞–ª–∞–Ω—Å: {get_balance(callback.from_user.id)} –º–æ–Ω–µ—Ç"
        )
        await state.set_state(GameState.main_menu)
        await callback.answer("üí• –ú–∏–Ω–∞!")
        return

    opened_levels.append((level, cell))
    current_level += 1

    await state.update_data(opened_levels=opened_levels, current_level=current_level)

    if current_level >= 6:
        coeffs = TOWER_COEFFICIENTS[tower_mines]
        final_coeff = coeffs[-1]
        win_amount = int(bet_amount * final_coeff)
        update_balance(callback.from_user.id, win_amount)

        await callback.message.edit_text(
            f"üéâ <b>–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –≤–µ—Ä—à–∏–Ω—ã –±–∞—à–Ω–∏!</b>\n"
            f"üèÜ –í—Å–µ 6 —É—Ä–æ–≤–Ω–µ–π –ø—Ä–æ–π–¥–µ–Ω—ã!\n"
            f"üí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç (x{final_coeff})\n"
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(callback.from_user.id)} –º–æ–Ω–µ—Ç"
        )
        await state.set_state(GameState.main_menu)
        await callback.answer("üèÜ –ë–∞—à–Ω—è –ø–æ–∫–æ—Ä–µ–Ω–∞!")
        return

    keyboard = create_tower_inline_keyboard(tower_mines, opened_levels, current_level)

    await callback.message.edit_text(
        f"üèó <b>–ë–∞—à–Ω—è ({tower_mines} {'–º–∏–Ω–∞' if tower_mines == 1 else '–º–∏–Ω—ã'})</b>\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} –º–æ–Ω–µ—Ç\n"
        f"üÜô –£—Ä–æ–≤–µ–Ω—å: {current_level + 1}/6\n"
        f"üèó –ü–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤—ã—à–µ, –∏–∑–±–µ–≥–∞—è –º–∏–Ω!",
        reply_markup=keyboard
    )

    await callback.answer(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å {level + 1} –ø—Ä–æ–π–¥–µ–Ω!")

@router.callback_query(F.data == "add_1000_coins")
async def add_coins_callback(callback: CallbackQuery):
    if callback.from_user.id == 6774136020:
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
            create_user(callback.from_user.id)

            # –ù–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
            update_balance(callback.from_user.id, 1000)
            new_balance = get_balance(callback.from_user.id)

            await callback.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ +1000 –º–æ–Ω–µ—Ç!")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await callback.message.answer(
                f"‚úÖ <b>–ú–æ–Ω–µ—Ç—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!</b>\n"
                f"üí∞ –î–æ–±–∞–≤–ª–µ–Ω–æ: +1000 –º–æ–Ω–µ—Ç\n"
                f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance}</b> –º–æ–Ω–µ—Ç"
            )
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    else:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", show_alert=True)

@router.callback_query(F.data == "add_coins_by_id")
async def add_coins_by_id_callback(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id == 6774136020:
        await state.set_state(GameState.admin_add_coins_id)
        await callback.message.answer(
            "üí≥ <b>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True
            )
        )
        await callback.answer()
    else:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", show_alert=True)

@router.message(GameState.admin_add_coins_id)
async def admin_process_user_id(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞":
        await state.set_state(GameState.profile)
        await message.answer(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_profile_keyboard(message.from_user.id)
        )
        return

    try:
        user_id = int(message.text)
        await state.update_data(target_user_id=user_id)
        await state.set_state(GameState.admin_add_coins_amount)
        await message.answer(
            f"üí≥ <b>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã</b>\n\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True
            )
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:")

@router.message(GameState.admin_add_coins_amount)
async def admin_process_amount(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞":
        await state.set_state(GameState.profile)
        await message.answer(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_profile_keyboard(message.from_user.id)
        )
        return

    try:
        amount = int(message.text)
        data = await state.get_data()
        target_user_id = data['target_user_id']

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        create_user(target_user_id)

        # –ù–∞—á–∏—Å–ª—è–µ–º –≤–∞–ª—é—Ç—É
        update_balance(target_user_id, amount)
        new_balance = get_balance(target_user_id)

        await state.set_state(GameState.profile)
        await message.answer(
            f"‚úÖ <b>–í–∞–ª—é—Ç–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞!</b>\n\n"
            f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {target_user_id}\n"
            f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {amount} –º–æ–Ω–µ—Ç\n"
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç",
            reply_markup=get_profile_keyboard(message.from_user.id)
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(GameState.main_menu)
    balance = get_balance(callback.from_user.id)
    await callback.message.edit_text(
        f"üé∞ <b>MoonCasino</b>\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance}</b> –º–æ–Ω–µ—Ç"
    )
    await callback.message.answer(
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_start_keyboard()
    )
    await callback.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())